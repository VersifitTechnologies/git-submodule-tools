#!/bin/bash -e
## Remove the submodule
## Usage: git rm-submodule [ --no-commit ] dir
## does not commit if --no-commit is given 

if [ "$1" == "--no-commit" ]; then
    nocommit=1
    dir=$2
else 
    dir=$1
fi

## check if this is a valid submodule
if [[ ! "$dir" || $(git ls-files --error-unmatch --stage -- "$dir" | grep -E '^160000') == "" ]]; then
    echo "Error: \"$dir\" is not a submodule."
    exit 1
fi

tdir=$PWD
cd "$dir"
## check if submodule is clean
git check-clean || exit 1
## check for unpushed changes
git check-unpushed || exit 1
## check for local non-tracking-branches
git check-non-tracking || exit 1
cd "$tdir"

## seems we're safe, so start removing
## remove config entries
git config -f .gitmodules --remove-section submodule."$dir" 2>/dev/null || echo -n ""
git config --remove-section submodule."$dir" 2>/dev/null || echo -n ""
git rm --cached "$dir"
rm -rf "$dir"
## commit changes
if [[ ! "$nocommit" ]]; then
    git add .gitmodules
    git commit -m "removed submodule $dir"
    ## TODO: commit in super repositories of this one also??
fi

