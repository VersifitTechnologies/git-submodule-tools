#!/bin/bash -e
## Do a recursive pull
## check for unclean folders
## and unpushed changes, since this might cause trouble
## if there are such changes, you have to do it by hand
## e.g., merge the where there are local and remote changes

## check for modified content and uncommited changes
git check-clean || exit 1

## check for unpushed commits in submodules
if [ -f .gitmodules ]; then
    unpushed=`git submodule --quiet foreach --recursive git check-unpushed -p`
    if [[ "$unpushed" != "" ]]; then
	echo "Error: Unpushed commits in submodules."
	echo "$unpushed"
	exit 1
    fi
fi
## git check-unpushed # no need to check in master

## do the pull
## git pull --recurse-submodules (does not work)
git pull || exit 1

if [ -f .gitmodules ]; then
    ## initialize submodules: cannot combine --init with --merge!!
    git submodule --quiet update --init --recursive || exit 1
    ## remove old submodule directories: 
    ## this is more or less safe, since only ignored files might be deleted
    git submodule --quiet foreach git rm-orphaned-submodule-dirs || exit 1
    git rm-orphaned-submodule-dirs || exit 1
    ## attach heads
    git submodule --quiet foreach --recursive git attach-head
    ## fetch changes in submodules 
    ## this is necessary since if the submodule commit did not change
    ## in the super rep., then the submodule is not updated.
    ## rfetch does this
    git rfetch
fi