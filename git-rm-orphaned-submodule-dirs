#!/bin/bash -e
## Remove orphaned submodule directories

## read input, display help if necessary
if [[ "$@" == *--help* ]]; then
    cat<<EOF
 This command removed orphaned submodule directories, i.e., 
 if a submodule was removed but the directory was not removed
 because it was not empty. Before removing a directory, the 
 script checks for any changes that might be lost. Afterwards,
 a submodule sync is executed.

 Usage:
    git rm-orphaned-submodule-dirs
EOF
    exit 0;
fi

## find submodule urls not in .gitmodules:
git config --get-regexp submodule.*url |
while read line; do
    #echo "$line"
    key=`expr "$line" : '\(.*\.url\) '`
    #echo "$key"
    dir=`expr "$key" : 'submodule\.\(.*\)\.url'`
    #echo "$dir"
    if [[ -d "$dir" && $(git config -f .gitmodules --get "$key") == '' ]]; then
	## Check if the directory does not contain non-tracking branches
	tdir=$PWD
	cd "$dir"
	git check-clean || exit 1
	git check-unpushed || exit 1
	git check-non-tracking || exit 1
	cd "$tdir"
	## TODO: confirm the removal??
	# echo "$dir is an orphan"
	# #get confirmation
	# until [[ "$ans" == "n" || "$ans" == "y" ]]; do
	#     if [[ "$ans" ]]; then
	# 	echo "Please answer with y or n"
	#     fi
	#     echo "hello"
	#     read asn # -p "Do you want to remove $dir (y/n)? " ans
	#     echo "ans: $ans"
	# done
	# echo "ans: $ans"
	# if [[ "$ans" == "y" ]]; then
	#     echo "removing..."
	rm -rf "$dir"
	# fi
    fi
done

git submodule sync > /dev/null
