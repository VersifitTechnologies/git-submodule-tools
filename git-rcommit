#!/bin/bash -e
## Recursive commit
## accepts the same arguments as commit
## but does a ccommit in each submodule as well

## read input, display help if necessary
if [[ "$@" == *--help* ]]; then
    cat<<EOF
 Recursive commit

 This command executes a recursive commit. It begins with the innermost
 submodules and works its way back. It is recommended to use the option
 -a, otherwise the script will not commit the change in a submodule
 pointer which changed because of a commit therein. Commit messages can 
 be supplied using the options -m <message> or -F <file>. See also 
 "git commit --help". 

 Usage:
    git rcommit ...

    ...: same arguments as git-commit
EOF
    exit 0;
fi

## commit in submodules first
git submodule --quiet foreach "git rcommit \"$@\"" || exit 1

## check for --all or -a argument
a=0
while test $# != 0
do
    case "$1" in
	-a|--all)
	    a=1
	    break
	    ;;
	--)
	    break
	    ;;
	--*) 
	    ;;
	-*) ## option like -qa
	    if [[ "$1" == *a* ]]; then
		a=1
		break
	    fi
	    ;;
    esac
    shift
done

if [ $a -ne 1 ] && ! git check-clean --unstaged --unmerged --exit-code --ignore-submodules=dirty; then
    echo "Warning in $PWD:"
    echo " Unstaged changes to files under version control."
    echo " To add, use option -a to stage or add files manually with git add <file>."
fi 
    
## commit if dirty (or --allow-empty is given)
if [[ "$@" == *--allow-empty* ]] || ([ $a -eq 1 ] && ! git check-clean --unstaged --unmerged --exit-code --ignore-submodules=dirty) || ! git check-clean --uncommitted --exit-code --ignore-submodules=dirty; 
then
    ## check for detached head
    if ! git symbolic-ref -q HEAD > /dev/null ; then
	echo "Error in $PWD:"
	echo " Refused to commit in detached head state. Use \"git rcheckout <branchname>\" to attach HEAD. List branches with \"git branch -v\"."
	exit 1
    fi

    echo "Committing in $PWD..."
    git commit -q "$@"
    
    if [ -f .gitmodules ]; then
	## Syncronize submodules if necessary
	git converge-submodules -q
    fi
fi

